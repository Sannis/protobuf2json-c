language: c
compiler:
  - gcc
  - clang
env:
  -
  - MY_SANITIZE=address
  - MY_SANITIZE=undefined
  - MY_SANITIZE=integer
  - MY_VALGRIND=1
  - MY_COVERAGE=1
matrix:
  exclude:
    - compiler: gcc
      env: MY_SANITIZE=address
    - compiler: gcc
      env: MY_SANITIZE=undefined
    - compiler: gcc
      env: MY_SANITIZE=integer
    - compiler: clang
      env: MY_VALGRIND=1
    - compiler: clang
      env: MY_COVERAGE=1
before_install:
  - sudo add-apt-repository --yes ppa:pi-rho/security
  - sudo apt-get update
  - sudo apt-get install libprotobuf-c0-dev libprotobuf-c0 protobuf-c-compiler
  - sudo apt-get install libjansson4-dev libjansson4
  - sudo apt-get install cppcheck
  - if [ "x$MY_VALGRIND" = "x1" ]; then sudo apt-get install valgrind; fi
  - if [ "x$MY_COVERAGE" = "x1" ]; then sudo apt-get install lcov; fi
  - if [ "x$MY_COVERAGE" = "x1" ]; then sudo pip install cpp-coveralls; fi
install:
  - ./autogen.sh
  - ./configure
  - if [ "x$MY_SANITIZE" != "x" ]; then ./configure --enable-my-sanitize=$MY_SANITIZE; fi
  - if [ "x$MY_VALGRIND" = "x1" ]; then ./configure --enable-my-valgrind; fi
  - if [ "x$MY_COVERAGE" = "x1" ]; then ./configure --enable-my-coverage; fi
  - make
script:
  - make cppcheck
  - make test
  - make benchmark
after_success:
  - if [ "x$MY_COVERAGE" = "x1" ]; then cpp-coveralls --build-root src --exclude test/ --exclude src/.libs --gcov-options '\-lp'; fi
